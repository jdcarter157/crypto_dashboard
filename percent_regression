from sklearn.linear_model import LinearRegression


import dash


import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import os
import pandas as pd
import numpy as np
import math
import time
from datetime import datetime
import mysql
import mysql.connector



from dash import Dash, dcc, html, Input, Output
import plotly.express as px

import random

# now = datetime.now()

 # DB CONN
mydb = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",

    database="ecoins"
)
# ADDING TO PAGES FOR FLASK

dash.register_page(__name__,)
def update_city_selected(input_value):
    return f'You selected: {input_value}'
years=['2022','2021','2020','2019','2018','2017','2016','2015','2014','2013']
months=['01','02','03','04','05','06','07','08','09','10','11','12']
days=['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']
# HTML COMPONENTS
layout = html.Div([
    html.H4(children='Simple Linear Regression',
            style={
                'textAlign':'center'
            }),
    dcc.Graph(id="graph_4", figure={"layout": {"height": 300, "width": 700}, }),

    html.Div(id='output-container-button',
             children=''),
    html.Div(id='output-container-button5',
             children='Enter a value and press submit'),

    dcc.Checklist(
        id="checklist",
        options=[
            {'label': 'ETH', 'value': 'line1'},
            {'label': 'BLTC', 'value': 'line2'},
            {'label': 'LTC', 'value': 'line3'},
            {'label': 'line4', 'value': 'line4'},
            {'label': 'line5', 'value': 'line5'},
            {'label': 'line6', 'value': 'line6'}

        ],
        labelStyle={'display': 'block'},
        value=[]
    ),
    dcc.Dropdown(id="year_drop",multi=False,value='2022',options=years),
    dcc.Dropdown(id="month_drop", multi=False, value='06', options=months),
    dcc.Dropdown(id="day_drop", multi=False, value='21', options=days)

])
# DASH CALLBACK
@dash.callback(
    dash.dependencies.Output('graph_4', 'figure'),
    dash.dependencies.Input('year_drop','value'),
    dash.dependencies.Input('month_drop', 'value'),
    dash.dependencies.Input('day_drop', 'value'),
    [dash.dependencies.Input('checklist','value')]
)

def update_output(year_drop,month_drop,day_drop,checklist):
    # print ("----")
    # print ( in1 )
    # print ( date5 + "" + date6)
    #
    # print ("----")

    # print(" number of clicks", n_clicks)
    # print(" value-->", value)
    # VALUE IS FROM HTML FORM INPUT
#    crypto_name = value
    crypto_name = 'BITMEX:LTCUSD'
    # print ("in1:", in1)
    # if ( crypto_name == "" ):
    #     crytoname = "BITMEX:ETHUSD_ETH"

    mycursor = mydb.cursor()
    # QUERY DATA FROM DB
    mycursor.execute("SELECT * from coin_data WHERE cname = %s", (crypto_name,))
    myresult = mycursor.fetchall()
    # print(myresult)
    # SETTING COLLUMNS FOR DF
    pd1 = pd.DataFrame(myresult, columns=['crid', 'cname', 'cdate', 'price', 'lows', 'highs'])

    # line
    pd1['cdate'] = pd.to_datetime(pd1['cdate'])

    # CHANGING DATES FROM STRINGS TO ORDINAL INTS
    pd1['cdate_ord'] = pd1['cdate'].apply(lambda x: x.toordinal())
    # RESHAPING FOR LINEAR REG
    x = pd1['cdate_ord'].to_numpy().reshape((-1, 1))
    y = pd1['price'].to_numpy()

    pd.set_option('display.max_rows', None)

    # fig = go.Figure()
    # fig.add_trace(go.Scatter(x=pd1.cdate, y=pd1.lows))

    ## add second line ##########################################

    # print("in2:", in2)
    # if (crypto_name == "None"):
    #     crytoname = "BITMEX:ETHUSD_ETH"

    cryptoname2 = "BITMEX:BLTC"

    mycursor2 = mydb.cursor()

    # QUERY DATA FROM DB
    mycursor2.execute("SELECT * from coin_data WHERE cname = %s", (cryptoname2,))
    myresult = mycursor2.fetchall()

    # SETTING COLLUMNS FOR DF
    pd2 = pd.DataFrame(myresult, columns=['crid', 'cname', 'cdate', 'price', 'lows', 'highs'])

    # line
    pd2['cdate'] = pd.to_datetime(pd2['cdate'])

    # print ( pd2.price)

    ## add second line ##########################################

    crypto_name = "BITMEX:ETHUSD_ETH"
    # print("in3:", in2)
    # if (crypto_name == "None"):
    #     crytoname = "BITMEX:ETHUSD_ETH"

    cryptoname = "BITMEX:ETHUSD_ETH"

    mycursor = mydb.cursor()

    # QUERY DATA FROM DB
    mycursor.execute("SELECT * from coin_data WHERE cname = %s", (crypto_name,))
    myresult = mycursor.fetchall()

    # SETTING COLLUMNS FOR DF
    pd3 = pd.DataFrame(myresult, columns=['crid', 'cname', 'cdate', 'price', 'lows', 'highs'])

    # line
    pd3['cdate'] = pd.to_datetime(pd3['cdate'])

    # print(pd3.cdate)
    pd4= pd.concat([pd1.cdate,pd1.price,pd2.price,pd3.price],axis=1)
    pd4['ETH']=pd3['price'].pct_change()
    pd4['BLTC']=pd2['price'].pct_change()
    pd4['LTC']=pd1['price'].pct_change()

    # print(pd4)
    # print(pd2.price)

    fig=px.scatter(pd4, x='cdate', y=['ETH','BLTC','LTC'], trendline='ols')
    # fig.update_layout(
    #     plot_bgcolor='rgba(0,0,0,0)',
    #     paper_bgcolor='rgba(0,0,0,0)',
    #     font_color='WHITE'
    # )

    # update figure on checkbox toggle
    # fig.update_traces(marker_color="RoyalBlue",
    #                   selector=dict(marker_color="MediumPurple"))
    print(checklist)
    # allowing users to hide and unhide traces for better view using checklist
    if checklist == ['line1']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'ETH'}))
    elif checklist==['line2']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'BLTC'}))
    elif checklist==['line3']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'p_change3'}))
    elif checklist==['line1','line2']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'ETH'}))
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'BLTC'}))
    elif checklist==['line2','line1']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'ETH'}))
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'BLTC'}))
    elif checklist==['line1','line3']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'ETH'}))
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'BLTC'}))
    elif checklist==['line3','line1']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'ETH'}))
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'LTC'}))
    elif checklist==['line2','line3']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'LTC'}))
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'BLTC'}))
    elif checklist==['line3','line2']:
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'LTC'}))
        fig.update_traces(overwrite=False, marker={"opacity": 0},selector=({'name':'BLTC'}))

    return fig
    # return p1
